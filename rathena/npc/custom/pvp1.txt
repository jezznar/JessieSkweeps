//========================================================================================
//Title: Jezznar's PvP Announcer
//Version: 1.0
//Author: Jezznar
//Created: 08/18/2015
//Released: 
//Compatibility: rAthena
//Support: SQL
//rAthena Topic: 
//Required File:
//      SQL Table: 
//References:
//
//Additional Note:
//     
//Glossary:

//Credits:
//      Thank you to the Athena community.
//Changelog:
//      v1.0 = Initial release
//©2015 Jezznar
//========================================================================================
-	script	PvPScript	-1,{
OnInit:
//--Basic Configurations
	set .Enable, 1; //(1: Enable, 0: Disable)
	set .GMLvl, 100; //Ignore GM with levels equal to or greater than this
	setarray .PVPMap$[0], "All"; //List all PvP Maps here
	set .debugmode, 1; //Enable in-game announcements for debug mode
//--MultiKill Announcements - made an offset here instead of doing -1s down there. 
	setarray .MKAnnounce$[0],0,0,"a Double Kill","a Triple Kill!","an Ultrakill!","a Rampage!","an Ownage!";
	setarray .KSAnnounce$[0],0,0,0,"Killing Spree!","Dominating!","Mega Kill!","Unstoppable!","Wicked Sick!","Monster Kill!","Godlike!","Beyond Godlike!";
end;

OnPCLoginEvent:
	if (.Enable) {
		set .@map, callsub (OnMapCheck);
		if (!.@map) {
			end;
		}
		set @mk, 0; //MultiKill counter init
		set @ks, 0; //KillStreak counter init
		
		//update character variable on login
		query_sql("SELECT `kills` from `pvp_rank` WHERE char_id="+getcharid(0,strcharinfo(0)),kills);
		
		//Test
		announce strcharinfo(0)+"("+getcharid(0,strcharinfo(0))+") pvp_rank information has been Loaded",bc_map;
		//EndTest
	}
end;

//-- Check MultiKill and KillStreak on Kill
OnPCKillEvent:
	if (.Enable) {
		set .@map, callsub (OnMapCheck);
		if (!.@map) {
			end;
		}
		set kills, kills+1;
		callsub (OnMultiKillCheck);
	}
end;

//-- Reset MultiKill and KillStreak on Death and on Logout
OnPCDieEvent:
	if (.Enable) {
		set .@map, callsub (OnMapCheck);
		if (!.@map) {
			end;
		}
		if (@mk>1) {callsub (OnMultiKillEnd);}
		if (@ks>1) {callsub (OnKillStreakEnd);}
	}
end;

OnPCLogoutEvent:
	if (.Enable) {
		set .@map, callsub (OnMapCheck);
		if (!.@map) {
			end;
		}	
		//Update SQL database on Logout
		query_sql("REPLACE into `pvp_rank` (char_id,`kill`) VALUES ("+getcharid(0,strcharinfo(0))+","+kills+")");
		if (mk>1) {callsub (OnMultiKillEnd);}
		if (@ks>1) {callsub (OnKillStreakEnd);}
		//Test
		if (.debugmode) {announce strcharinfo(0)+"("+getcharid(0,strcharinfo(0))+") has logged out.",bc_map;}
		//EndTest
	}
end;

//-- Custom Labels
//Map Check
OnMapCheck:
	if ( .PVPMap$[0] != "All") {
		for(set .@i, 0; .@i < (getarraysize(.PVPMap$) -1); set .@i, .@i+1){
			if(strcharinfo(3) == .PvPMap$[.@i]) {
				return 1;
			}
		}
		return 0;
	}
return 1;

//--MutikillStreak Stuff
OnMultiKillCheck:
	deltimer "PvPScript::OnMultiKillEnd"; //because he killed someone, duh?
	addtimer 18000, "PvPScript::OnMultiKillEnd";
	set @mk, @mk + 1;
	
	//to prevent reading unused .MKAnnounce elements
	switch (@mk) {
	case 0:
	case 1:
		break;
	case 2:
	case 3:
	case 4:
	case 5:
		announce strcharinfo(0)+" just had "+.MKAnnounce$[@mk],bc_map;
		break;
	default:
		announce strcharinfo(0)+" just had "+.MKAnnounce$[6],bc_map;
		break;
	}
	
	//if (@mk>1) {
	//	announce strcharinfo(0)+" just had "+.MKAnnounce$[@mk],bc_map;
	//}
	//Test
	if(.debugmode) {
		announce strcharinfo(0)+"("+getcharid(0,strcharinfo(0))+") kills:"+kills,bc_map;
		announce strcharinfo(0)+"("+getcharid(0,strcharinfo(0))+") MultiKill Timer activated.",bc_map;
		announce strcharinfo(0)+"("+getcharid(0,strcharinfo(0))+") MK:"+@mk,bc_map;
	}
	//EndTest	
return;

OnMultiKillEnd:
	set @mk, 0;
	deltimer "PvPScript::OnMultiKillEnd";
	//Test
	if (.debugmode) {announce strcharinfo(0)+"("+getcharid(0,strcharinfo(0))+") MultiKill Timer has been reset.",bc_map;}
	//EndTest
return;

//--KillStreak Stuff
OnKillStreakCheck:

return;

OnKillStreakEnd:
	set @ks, @ks+1;
return;

	
}


