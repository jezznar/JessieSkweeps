//========================================================================================
//Title: Jezznar's PvP Script
//Version: 1.0
//Author: Jezznar
//Created: 08/18/2015
//Released: 
//Compatibility: rAthena
//Support: SQL
//rAthena Topic: 
//Required File:
//      SQL Table: 
// 			CREATE TABLE IF NOT EXISTS `ragnarok`.`pvp_rank` (
//			 `char_id` INT NOT NULL DEFAULT 0 COMMENT '',
//			 `kills` INT NULL DEFAULT 0 COMMENT '',
//			 `longestks` INT NULL DEFAULT 0 COMMENT '',
//  		 PRIMARY KEY (`char_id`) COMMENT '')
//			 ENGINE = MyISAM;
//References: Ghost's PvP Script
//
//Additional Note:
//     
//Glossary:
// ks - kill streak
// mk - multi kill
//
//Credits:
//      Ghost for PVP script
//Changelog:
//      v1.0 = Initial release
//©2015 Jezznar
//========================================================================================
-	script	PvPScript	-1,{
OnInit:
//--Basic Configurations
	set .Enable, 1; //(1: Enable, 0: Disable)
	set .GMLvl, 100; //Ignore GM with levels equal to or greater than this
	setarray .PVPMap$[0], "pvp_y_1-2","pvp_y_1-1"; //List all PvP Maps here
	set .@map, 1; //do not touch. Used to determine if map is eligible for announcements -> OnMapCheck
//--Set mapflag loadevent on all PVPMaps if not set to "All"
	if ( .PVPMap$[0] != "All") {
		for(set .@i, 0; .@i <= (getarraysize(.PVPMap$)-1); set .@i, .@i+1){
			setmapflag	.PvPMap$[.@i],	mf_loadevent;
		}
	}
//--MultiKill Announcements - made an offset here instead of doing -1s down there. 
	setarray .MKAnnounce$[0],0,0,"a Double Kill","a Triple Kill!","an Ultrakill!","a Rampage!","an Ownage!";
	setarray .KSAnnounce$[0],0,0,0,"on Killing Spree!","Dominating!","on Mega Kill!","Unstoppable!","Wicked Sick!","on Monster Kill!","Godlike!","Beyond Godlike!";
	setarray .KillWord$[0], "pwned", "killed", "disintegrated", "neutralized"; //Enable above setting for this to work
//--Debugmode
	set .debugmode, 1; //Enable in-game announcements for debug mode
end;

//--Init when login
OnPCLoginEvent:
	if (.Enable && (getgmlevel() < .GMLvl )) {
		set .@map, callsub (OnMapCheck);		
		if (!.@map) {
			end;
		}
		callsub (OnMultiKillEnd);
		callsub (OnKillStreakEnd);
		
		//set mk, 0; //MultiKill counter init
		//set ks, 0; //KillStreak counter init
		
		//update character variable on login
		query_sql("SELECT `kills` from `pvp_rank` WHERE char_id="+getcharid(0,strcharinfo(0)),kills);
		
		//Test
		if (.debugmode) {announce strcharinfo(0)+"("+getcharid(0,strcharinfo(0))+") pvp_rank information has been Loaded",bc_map;}
		//EndTest
	}
end;

OnPCLoadMapEvent:
	if (.Enable && (getgmlevel() < .GMLvl )) {
		set .@map, callsub (OnMapCheck);		
		if (!.@map) {
			end;
		}
		if ( .PVPMap$[0] != "All")	{announce strcharinfo(0)+" has entered PVP!",bc_map;}
		
		//Test
		if (.debugmode) {announce strcharinfo(0)+"("+getcharid(0,strcharinfo(0))+") Load map event success.",bc_map;}
		//EndTest
	}
end;


//-- Check MultiKill and KillStreak on Kill
OnPCKillEvent:
	if (.Enable && (getgmlevel() < .GMLvl )) {
		
		set .@map, callsub (OnMapCheck);
		//Test
		if (.debugmode) {
			announce strcharinfo(0)+"("+getcharid(0,strcharinfo(0))+") Map: "+strcharinfo(3),bc_map;
			announce strcharinfo(0)+"("+getcharid(0,strcharinfo(0))+") .@map value: "+.@map,bc_map;
			announce strcharinfo(0)+"("+getcharid(0,strcharinfo(0))+") .PVPMap$ array size:"+getarraysize(.PVPMap$),bc_map;
		}
		//EndTest
		if (!.@map) {
			end;
		}
		set kills, kills+1;
		announce strcharinfo(0)+" "+.KillWord$[rand(0, getarraysize(.KillWord$)-1)]+" "+rid2name(killedrid)+"'s head",bc_map;
		
		callsub (OnMultiKillCheck);
		callsub (OnKillStreakCheck);
		
		//Test
		if (.debugmode) {announce strcharinfo(0)+"("+getcharid(0,strcharinfo(0))+") kills:"+kills,bc_map;}
		//EndTest
	}
end;

//-- Reset MultiKill and KillStreak on Death and on Logout
OnPCDieEvent:
	if (.Enable && (getgmlevel() < .GMLvl )) {
		set .@map, callsub (OnMapCheck);
		if (!.@map) {
			end;
		}
		if (mk>0) {callsub (OnMultiKillEnd);}
		if (ks>0) {callsub (OnKillStreakEnd);}
	}
end;

OnPCLogoutEvent:
	if (.Enable && (getgmlevel() < .GMLvl )) {
		set .@map, callsub (OnMapCheck);
		if (!.@map) {
			end;
		}	
		//Update SQL database on Logout
		Query_Sql("REPLACE into `pvp_rank` (char_id,`kills`) VALUES ("+getcharid(0,strcharinfo(0))+","+kills+")");
		if (mk>1) {callsub (OnMultiKillEnd);}
		if (ks>1) {callsub (OnKillStreakEnd);}
		
		//Test
		if (.debugmode) {announce strcharinfo(0)+"("+getcharid(0,strcharinfo(0))+") has logged out.",bc_map;}
		//EndTest
	}
end;

//-- Custom Labels
//Map Check
OnMapCheck:
	if ( .PVPMap$[0] != "All") {
		for(set .@i, 0; .@i <= (getarraysize(.PVPMap$)-1); set .@i, .@i+1){
			if(strcharinfo(3) == .PvPMap$[.@i]) {
				return 1;
			}
		}
		return 0;
	}
return 1;

//--MutikillStreak Stuff
OnMultiKillCheck:
	deltimer "PvPScript::OnMultiKillEnd"; //because he killed someone, duh?
	addtimer 18000, "PvPScript::OnMultiKillEnd";
	set mk, mk + 1;
	
	//to prevent reading unused .MKAnnounce elements
	switch (mk) {
	case 0:
	case 1:
		break;
	case 2:
	case 3:
	case 4:
	case 5:
		announce strcharinfo(0)+" just had "+.MKAnnounce$[mk],bc_map;
		break;
	default:
		announce strcharinfo(0)+" just had "+.MKAnnounce$[6],bc_map;
		break;
	}
	
	//Test
	if(.debugmode) {
		announce strcharinfo(0)+"("+getcharid(0,strcharinfo(0))+") MultiKill Timer activated.",bc_map;
		announce strcharinfo(0)+"("+getcharid(0,strcharinfo(0))+") MK:"+mk,bc_map;
	}
	//EndTest	
return;

OnMultiKillEnd:
	set mk, 0;
	deltimer "PvPScript::OnMultiKillEnd";
	//Test
	if (.debugmode) {announce strcharinfo(0)+"("+getcharid(0,strcharinfo(0))+") MultiKill Timer has been reset.",bc_map;}
	//EndTest
return;

//--KillStreak Stuff
OnKillStreakCheck:
	set ks, ks + 1;
	switch (ks) {
	case 0:
	case 1:
	case 2:
		break;
	case 3:
	case 4:
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		announce strcharinfo(0)+" is "+.KSAnnounce$[ks],bc_map;
		break;
	default:
		announce strcharinfo(0)+" just is"+.KSAnnounce$[10],bc_map;
		break;
	}
	
	//Test
	if(.debugmode) {announce strcharinfo(0)+"("+getcharid(0,strcharinfo(0))+") KS:"+ks,bc_map;}
	//EndTest		
return;

OnKillStreakEnd:
	if (ks>2) {announce rid2name(killerrid)+" has ended "+strcharinfo(0)+"'s killing streak!",bc_map;}
	set ks, 0;
	
	//Test
	if (.debugmode) {announce strcharinfo(0)+"("+getcharid(0,strcharinfo(0))+") Kill Streak has been reset.",bc_map;}
	//EndTest
return;

	
}


